{"version":3,"file":"static/webpack/static/development/pages/index.js.cf8404fd349afa9f755c.hot-update.js","sources":["webpack:///./pages/index.jsx"],"sourcesContent":["/* eslint-disable jsx-a11y/mouse-events-have-key-events */\nimport React, { useState, useEffect } from 'react';\nimport * as _ from 'lodash';\nimport Head from 'next/head';\nimport { DndProvider } from 'react-dnd';\nimport Backend from 'react-dnd-html5-backend';\nimport Node from '../components/node';\nimport Dijkstra from '../algorithms/dijkstra';\nimport BFS from '../algorithms/BFS';\nimport DFS from '../algorithms/DFS';\nimport AStar from '../algorithms/AStar';\nimport Board from '../components/board';\n\nconst [ROWS, COLS] = [15, 20];\nconst [START_ROW, START_COL] = [0, 0];\nconst [FINISH_ROW, FINISH_COL] = [14, 18];\n\nconst getNode = (row, col, wall = false) => ({\n  row,\n  col,\n  isStart: row === START_ROW && col === START_COL,\n  isFinish: row === FINISH_ROW && col === FINISH_COL,\n  isVisited: false,\n  isWall: wall,\n  distance: Infinity,\n  previousNode: null,\n});\n\nconst getGrid = (walls = null) => {\n  const grid = [];\n  _.each(new Array(ROWS), (_row, rowIndex) => {\n    const currentRow = [];\n    _.each(new Array(COLS), (_col, colIndex) => {\n      // eslint-disable-next-line max-len\n      currentRow.push(getNode(rowIndex, colIndex, walls ? walls[rowIndex][colIndex].isWall : false));\n    });\n    grid.push(currentRow);\n  });\n\n  return grid;\n};\n\nconst toggleWall = (grid, row, col) => {\n  const newGrid = _.clone(grid);\n  const node = newGrid[row][col];\n  if (!(node.isStart || node.isFinish)) {\n    const newNode = _.assign(node, { isWall: !node.isWall });\n    newGrid[row][col] = newNode;\n  }\n  return newGrid;\n};\n\nconst Home = () => {\n\n  return (\n    <div>\n      <Head>\n        <title>Home</title>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <DndProvider backend={Backend}>\n        <Board />\n      </DndProvider>\n    </div>\n  );\n};\n\nexport default Home;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AACA;AAUA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;A","sourceRoot":""}